{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jarno\\\\Desktop\\\\Spa-Website\\\\babyspa\\\\src\\\\components\\\\AvailableTimesForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './AvailableTimesForm.css';\nimport supabase from '../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isValidDate = date => {\n  return !isNaN(Date.parse(date));\n};\nconst isValidTime = time => {\n  const timeRegex = /^([01]\\d|2[0-3]):([0-5]\\d)$/;\n  return timeRegex.test(time);\n};\nconst formatTime = time => {\n  return new Date(`1970-01-01T${time}:00`).toLocaleTimeString([], {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\nconst AvailableTimesForm = ({\n  onSaveTimes,\n  onDeleteTimes,\n  selectedDate\n}) => {\n  _s();\n  const [times, setTimes] = useState([]);\n  const [timeInput, setTimeInput] = useState('');\n  const [templates, setTemplates] = useState([]);\n  const [templateName, setTemplateName] = useState('');\n  const [selectedTemplate, setSelectedTemplate] = useState('');\n  const [menuTemplate, setMenuTemplate] = useState(null);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [templateToDelete, setTemplateToDelete] = useState(null);\n  const [errors, setErrors] = useState([]);\n  const [availableTimes, setAvailableTimes] = useState([]);\n  const menuRef = useRef(null); // Ref for the menu container\n\n  useEffect(() => {\n    const fetchTemplates = async () => {\n      try {\n        const {\n          data,\n          error\n        } = await supabase.from('time-templates').select('*');\n        if (error) throw error;\n        setTemplates(data || []);\n      } catch (error) {\n        console.error('Error fetching templates:', error);\n      }\n    };\n    fetchTemplates();\n  }, []);\n  useEffect(() => {\n    const fetchAvailableTimes = async () => {\n      try {\n        const {\n          data,\n          error\n        } = await supabase.from('available_times').select('time'); // Fetch only the time field\n\n        if (error) throw error;\n        setAvailableTimes(data || []);\n      } catch (error) {\n        console.error('Error fetching available times:', error);\n      }\n    };\n    fetchAvailableTimes();\n  }, []);\n  useEffect(() => {\n    // Close the menu if clicked outside\n    const handleClickOutside = event => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setMenuTemplate(null);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n  const handleAddTime = () => {\n    const newErrors = [];\n    if (!isValidDate(selectedDate)) {\n      newErrors.push('Invalid date.');\n    }\n    if (!isValidTime(timeInput)) {\n      newErrors.push('Invalid time format.');\n    }\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n      return;\n    }\n    setErrors([]);\n    setTimes([...times, {\n      date: selectedDate,\n      time: timeInput\n    }]);\n    setTimeInput('');\n  };\n  const handleSave = async () => {\n    if (times.length === 0) {\n      alert('No times to save.');\n      return;\n    }\n    const invalidTimes = times.filter(time => !isValidDate(time.date) || !isValidTime(time.time));\n    if (invalidTimes.length > 0) {\n      setErrors(['Some time entries are invalid and will not be saved.']);\n      return;\n    }\n    try {\n      console.log('Times to save:', times); // Log the times being saved\n\n      // Prepare data for upsert\n      const formattedTimes = times.map(time => ({\n        date: time.date,\n        // Date is already in ISO format\n        time: time.time\n      }));\n      console.log('Formatted times for upsert:', formattedTimes); // Log formatted times\n\n      // Perform the upsert operation\n      const {\n        data,\n        error\n      } = await supabase.from('available_times').upsert(formattedTimes, {\n        returning: 'representation'\n      });\n      if (error) {\n        console.error('Supabase error:', error); // Log Supabase error\n        throw error;\n      }\n      console.log('Times saved successfully:', data); // Log the result\n\n      // Clear the local state\n      setTimes([]);\n      setErrors([]);\n    } catch (error) {\n      console.error('Error saving times:', error);\n      setErrors(['An error occurred while saving times.']);\n    }\n  };\n  const handleSaveTemplate = async () => {\n    if (templateName && times.length) {\n      const invalidTimes = times.filter(time => !isValidDate(time.date) || !isValidTime(time.time));\n      if (invalidTimes.length > 0) {\n        setErrors(['Some time entries are invalid and will not be saved.']);\n        return;\n      }\n      try {\n        const newTemplate = {\n          name: templateName,\n          times: JSON.stringify(times)\n        };\n        const {\n          error\n        } = await supabase.from('time-templates').insert([newTemplate]);\n        if (error) throw error;\n        const {\n          data,\n          error: fetchError\n        } = await supabase.from('time-templates').select('*');\n        if (fetchError) throw fetchError;\n        setTemplates(data || []);\n        setTemplateName('');\n        setTimes([]);\n        setErrors([]);\n      } catch (error) {\n        console.error('Error saving template:', error);\n      }\n    } else {\n      alert('Template name or times cannot be empty');\n    }\n  };\n  const handleSelectTemplate = async e => {\n    const selected = e.target.value;\n    setSelectedTemplate(selected);\n    if (selected) {\n      try {\n        const {\n          data,\n          error\n        } = await supabase.from('time-templates').select('times').eq('name', selected).single();\n        if (error) throw error;\n        const template = data;\n        if (template) {\n          setTimes(JSON.parse(template.times));\n        }\n      } catch (error) {\n        console.error('Error fetching template:', error);\n      }\n    } else {\n      setTimes([]);\n    }\n  };\n  const handleDeleteTemplate = async () => {\n    if (templateToDelete) {\n      try {\n        const {\n          error\n        } = await supabase.from('time-templates').delete().eq('name', templateToDelete);\n        if (error) throw error;\n        const {\n          data,\n          error: fetchError\n        } = await supabase.from('time-templates').select('*');\n        if (fetchError) throw fetchError;\n        setTemplates(data || []);\n        setShowConfirmation(false);\n        setTemplateToDelete(null);\n      } catch (error) {\n        console.error('Error deleting template:', error);\n      }\n    }\n  };\n  const handleConfirmDelete = () => {\n    handleDeleteTemplate();\n  };\n  const handleActionClick = templateName => {\n    setMenuTemplate(templateName);\n    setShowConfirmation(false);\n  };\n  const handleMenuAction = action => {\n    if (action === 'Delete') {\n      setTemplateToDelete(menuTemplate);\n      setShowConfirmation(true);\n    } else if (action === 'Use') {\n      const template = templates.find(t => t.name === menuTemplate);\n      if (template) {\n        setTimes(JSON.parse(template.times));\n      }\n      setMenuTemplate(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"times-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-side\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"label\",\n          children: \"Add Times\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: timeInput,\n          onChange: e => setTimeInput(e.target.value),\n          placeholder: \"Enter time\",\n          className: \"input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-button\",\n          onClick: handleAddTime,\n          children: \"Add Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this), errors.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"errors\",\n        children: errors.map((error, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: error\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"label\",\n          children: \"Times to be saved\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list\",\n          children: times.map((time, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"list-item\",\n            children: [formatTime(time.time), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"delete-icon\",\n              onClick: () => setTimes(times.filter((_, i) => i !== index)),\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-button\",\n          onClick: handleSave,\n          children: \"Save Times\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: templateName,\n          onChange: e => setTemplateName(e.target.value),\n          placeholder: \"Template name\",\n          className: \"input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-button\",\n          onClick: handleSaveTemplate,\n          children: \"Save Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-side\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"label\",\n        children: \"Select Template\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedTemplate,\n        onChange: handleSelectTemplate,\n        className: \"select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select a Template --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }, this), templates.map(template => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: template.name,\n          children: template.name\n        }, template.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: menuRef,\n        className: `menu ${menuTemplate ? 'visible' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleMenuAction('Use'),\n          children: \"Use\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleMenuAction('Delete'),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }, this), showConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-dialog\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Are you sure you want to delete this template?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleConfirmDelete,\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowConfirmation(false),\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 9\n  }, this);\n};\n_s(AvailableTimesForm, \"y+i5CvBiW9M2x01zQAja33WIEig=\");\n_c = AvailableTimesForm;\nexport default AvailableTimesForm;\nvar _c;\n$RefreshReg$(_c, \"AvailableTimesForm\");","map":{"version":3,"names":["React","useState","useEffect","useRef","supabase","jsxDEV","_jsxDEV","isValidDate","date","isNaN","Date","parse","isValidTime","time","timeRegex","test","formatTime","toLocaleTimeString","hour","minute","AvailableTimesForm","onSaveTimes","onDeleteTimes","selectedDate","_s","times","setTimes","timeInput","setTimeInput","templates","setTemplates","templateName","setTemplateName","selectedTemplate","setSelectedTemplate","menuTemplate","setMenuTemplate","showConfirmation","setShowConfirmation","templateToDelete","setTemplateToDelete","errors","setErrors","availableTimes","setAvailableTimes","menuRef","fetchTemplates","data","error","from","select","console","fetchAvailableTimes","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","handleAddTime","newErrors","push","length","handleSave","alert","invalidTimes","filter","log","formattedTimes","map","upsert","returning","handleSaveTemplate","newTemplate","name","JSON","stringify","insert","fetchError","handleSelectTemplate","e","selected","value","eq","single","template","handleDeleteTemplate","delete","handleConfirmDelete","handleActionClick","handleMenuAction","action","find","t","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","index","_","i","id","ref","_c","$RefreshReg$"],"sources":["C:/Users/jarno/Desktop/Spa-Website/babyspa/src/components/AvailableTimesForm.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './AvailableTimesForm.css';\r\nimport supabase from '../supabaseClient';\r\n\r\nconst isValidDate = (date) => {\r\n    return !isNaN(Date.parse(date));\r\n};\r\n\r\nconst isValidTime = (time) => {\r\n    const timeRegex = /^([01]\\d|2[0-3]):([0-5]\\d)$/;\r\n    return timeRegex.test(time);\r\n};\r\n\r\nconst formatTime = (time) => {\r\n    return new Date(`1970-01-01T${time}:00`).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n};\r\n\r\nconst AvailableTimesForm = ({ onSaveTimes, onDeleteTimes, selectedDate }) => {\r\n    const [times, setTimes] = useState([]);\r\n    const [timeInput, setTimeInput] = useState('');\r\n    const [templates, setTemplates] = useState([]);\r\n    const [templateName, setTemplateName] = useState('');\r\n    const [selectedTemplate, setSelectedTemplate] = useState('');\r\n    const [menuTemplate, setMenuTemplate] = useState(null);\r\n    const [showConfirmation, setShowConfirmation] = useState(false);\r\n    const [templateToDelete, setTemplateToDelete] = useState(null);\r\n    const [errors, setErrors] = useState([]);\r\n    const [availableTimes, setAvailableTimes] = useState([]);\r\n    const menuRef = useRef(null); // Ref for the menu container\r\n\r\n    useEffect(() => {\r\n        const fetchTemplates = async () => {\r\n            try {\r\n                const { data, error } = await supabase\r\n                    .from('time-templates')\r\n                    .select('*');\r\n\r\n                if (error) throw error;\r\n\r\n                setTemplates(data || []);\r\n            } catch (error) {\r\n                console.error('Error fetching templates:', error);\r\n            }\r\n        };\r\n\r\n        fetchTemplates();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchAvailableTimes = async () => {\r\n            try {\r\n                const { data, error } = await supabase\r\n                    .from('available_times')\r\n                    .select('time'); // Fetch only the time field\r\n\r\n                if (error) throw error;\r\n\r\n                setAvailableTimes(data || []);\r\n            } catch (error) {\r\n                console.error('Error fetching available times:', error);\r\n            }\r\n        };\r\n\r\n        fetchAvailableTimes();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Close the menu if clicked outside\r\n        const handleClickOutside = (event) => {\r\n            if (menuRef.current && !menuRef.current.contains(event.target)) {\r\n                setMenuTemplate(null);\r\n            }\r\n        };\r\n\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }, []);\r\n\r\n    const handleAddTime = () => {\r\n        const newErrors = [];\r\n\r\n        if (!isValidDate(selectedDate)) {\r\n            newErrors.push('Invalid date.');\r\n        }\r\n\r\n        if (!isValidTime(timeInput)) {\r\n            newErrors.push('Invalid time format.');\r\n        }\r\n\r\n        if (newErrors.length > 0) {\r\n            setErrors(newErrors);\r\n            return;\r\n        }\r\n\r\n        setErrors([]);\r\n        setTimes([...times, { date: selectedDate, time: timeInput }]);\r\n        setTimeInput('');\r\n    };\r\n\r\n    const handleSave = async () => {\r\n        if (times.length === 0) {\r\n            alert('No times to save.');\r\n            return;\r\n        }\r\n    \r\n        const invalidTimes = times.filter(time => !isValidDate(time.date) || !isValidTime(time.time));\r\n    \r\n        if (invalidTimes.length > 0) {\r\n            setErrors(['Some time entries are invalid and will not be saved.']);\r\n            return;\r\n        }\r\n    \r\n        try {\r\n            console.log('Times to save:', times); // Log the times being saved\r\n    \r\n            // Prepare data for upsert\r\n            const formattedTimes = times.map(time => ({\r\n                date: time.date, // Date is already in ISO format\r\n                time: time.time\r\n            }));\r\n    \r\n            console.log('Formatted times for upsert:', formattedTimes); // Log formatted times\r\n    \r\n            // Perform the upsert operation\r\n            const { data, error } = await supabase\r\n                .from('available_times')\r\n                .upsert(formattedTimes, { returning: 'representation' });\r\n    \r\n            if (error) {\r\n                console.error('Supabase error:', error); // Log Supabase error\r\n                throw error;\r\n            }\r\n    \r\n            console.log('Times saved successfully:', data); // Log the result\r\n    \r\n            // Clear the local state\r\n            setTimes([]);\r\n            setErrors([]);\r\n        } catch (error) {\r\n            console.error('Error saving times:', error);\r\n            setErrors(['An error occurred while saving times.']);\r\n        }\r\n    };\r\n\r\n    const handleSaveTemplate = async () => {\r\n        if (templateName && times.length) {\r\n            const invalidTimes = times.filter(time => !isValidDate(time.date) || !isValidTime(time.time));\r\n\r\n            if (invalidTimes.length > 0) {\r\n                setErrors(['Some time entries are invalid and will not be saved.']);\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const newTemplate = { name: templateName, times: JSON.stringify(times) };\r\n                const { error } = await supabase\r\n                    .from('time-templates')\r\n                    .insert([newTemplate]);\r\n\r\n                if (error) throw error;\r\n\r\n                const { data, error: fetchError } = await supabase\r\n                    .from('time-templates')\r\n                    .select('*');\r\n\r\n                if (fetchError) throw fetchError;\r\n\r\n                setTemplates(data || []);\r\n                setTemplateName('');\r\n                setTimes([]);\r\n                setErrors([]);\r\n            } catch (error) {\r\n                console.error('Error saving template:', error);\r\n            }\r\n        } else {\r\n            alert('Template name or times cannot be empty');\r\n        }\r\n    };\r\n\r\n    const handleSelectTemplate = async (e) => {\r\n        const selected = e.target.value;\r\n        setSelectedTemplate(selected);\r\n\r\n        if (selected) {\r\n            try {\r\n                const { data, error } = await supabase\r\n                    .from('time-templates')\r\n                    .select('times')\r\n                    .eq('name', selected)\r\n                    .single();\r\n\r\n                if (error) throw error;\r\n\r\n                const template = data;\r\n                if (template) {\r\n                    setTimes(JSON.parse(template.times));\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching template:', error);\r\n            }\r\n        } else {\r\n            setTimes([]);\r\n        }\r\n    };\r\n\r\n    const handleDeleteTemplate = async () => {\r\n        if (templateToDelete) {\r\n            try {\r\n                const { error } = await supabase\r\n                    .from('time-templates')\r\n                    .delete()\r\n                    .eq('name', templateToDelete);\r\n\r\n                if (error) throw error;\r\n\r\n                const { data, error: fetchError } = await supabase\r\n                    .from('time-templates')\r\n                    .select('*');\r\n\r\n                if (fetchError) throw fetchError;\r\n\r\n                setTemplates(data || []);\r\n                setShowConfirmation(false);\r\n                setTemplateToDelete(null);\r\n            } catch (error) {\r\n                console.error('Error deleting template:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleConfirmDelete = () => {\r\n        handleDeleteTemplate();\r\n    };\r\n\r\n    const handleActionClick = (templateName) => {\r\n        setMenuTemplate(templateName);\r\n        setShowConfirmation(false);\r\n    };\r\n\r\n    const handleMenuAction = (action) => {\r\n        if (action === 'Delete') {\r\n            setTemplateToDelete(menuTemplate);\r\n            setShowConfirmation(true);\r\n        } else if (action === 'Use') {\r\n            const template = templates.find((t) => t.name === menuTemplate);\r\n            if (template) {\r\n                setTimes(JSON.parse(template.times));\r\n            }\r\n            setMenuTemplate(null);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"times-form\">\r\n            <div className=\"left-side\">\r\n                <div className=\"form-group\">\r\n                    <h4 className=\"label\">Add Times</h4>\r\n                    <input\r\n                        type=\"time\"\r\n                        value={timeInput}\r\n                        onChange={(e) => setTimeInput(e.target.value)}\r\n                        placeholder=\"Enter time\"\r\n                        className=\"input\"\r\n                    />\r\n                    <button className=\"add-button\" onClick={handleAddTime}>Add Time</button>\r\n                </div>\r\n\r\n                {errors.length > 0 && (\r\n                    <div className=\"errors\">\r\n                        {errors.map((error, index) => (\r\n                            <div key={index} className=\"error-message\">{error}</div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n\r\n                <div>\r\n                    <h4 className=\"label\">Times to be saved</h4>\r\n                    <ul className=\"list\">\r\n                        {times.map((time, index) => (\r\n                            <li key={index} className=\"list-item\">\r\n                                {formatTime(time.time)}\r\n                                <span className=\"delete-icon\" onClick={() => setTimes(times.filter((_, i) => i !== index))}>×</span>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                    <button className=\"save-button\" onClick={handleSave}>Save Times</button>\r\n                </div>\r\n\r\n                <div>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={templateName}\r\n                        onChange={(e) => setTemplateName(e.target.value)}\r\n                        placeholder=\"Template name\"\r\n                        className=\"input\"\r\n                    />\r\n                    <button className=\"save-button\" onClick={handleSaveTemplate}>Save Template</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"right-side\">\r\n                <h4 className=\"label\">Select Template</h4>\r\n                <select value={selectedTemplate} onChange={handleSelectTemplate} className=\"select\">\r\n                    <option value=\"\">-- Select a Template --</option>\r\n                    {templates.map((template) => (\r\n                        <option key={template.id} value={template.name}>{template.name}</option>\r\n                    ))}\r\n                </select>\r\n                <div ref={menuRef} className={`menu ${menuTemplate ? 'visible' : ''}`}>\r\n                    <button onClick={() => handleMenuAction('Use')}>Use</button>\r\n                    <button onClick={() => handleMenuAction('Delete')}>Delete</button>\r\n                </div>\r\n\r\n                {showConfirmation && (\r\n                    <div className=\"confirmation-dialog\">\r\n                        <p>Are you sure you want to delete this template?</p>\r\n                        <button onClick={handleConfirmDelete}>Yes</button>\r\n                        <button onClick={() => setShowConfirmation(false)}>No</button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AvailableTimesForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}