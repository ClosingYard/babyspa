{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jarno\\\\Desktop\\\\Spa-Website\\\\babyspa\\\\src\\\\pages\\\\AdminDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport CalendarComponent from '../components/CalendarComponent';\nimport supabase from '../supabaseClient'; // Import Supabase client\nimport './Styling/adminDashboard.css';\nimport AvailableTimesForm from '../components/AvailableTimesForm';\n\n// Utility functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatDate = date => {\n  if (!(date instanceof Date)) throw new Error('Invalid date');\n  return date.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n};\n\n// Utility function to format time only within this component\nconst formatTime = time => {\n  console.log(\"Received time for formatting:\", time); // Log the input\n\n  if (typeof time !== 'string') {\n    console.error(`Expected a string but received: ${typeof time}`, time);\n    throw new Error('Time must be a string');\n  }\n\n  // Trim any extra spaces or hidden characters\n  time = time.trim();\n\n  // Regex to match HH:MM:SS or HH:MM format\n  const match = /^([01]\\d|2[0-3]):([0-5]\\d)(:[0-5]\\d)?$/.exec(time);\n  if (!match) {\n    console.error(`Invalid time format encountered: ${time}`);\n    throw new Error(`Invalid time format: ${time}`);\n  }\n\n  // Returning HH:MM format only (ignoring seconds if present)\n  return `${match[1]}:${match[2]}`;\n};\nconst AdminDashboard = () => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [availableTimes, setAvailableTimes] = useState([]);\n  const [bookings, setBookings] = useState([]);\n  const [filter, setFilter] = useState('upcoming'); // Default filter is 'upcoming'\n  const [showTimesForm, setShowTimesForm] = useState(false);\n  const fetchTimes = useCallback(async () => {\n    if (selectedDate) {\n      try {\n        const formattedDate = formatDate(selectedDate);\n        console.log('Fetching times for date:', formattedDate);\n\n        // Fetch both id and time\n        const {\n          data,\n          error\n        } = await supabase.from('available_times').select('id, time') // Include id in the selection\n        .eq('date', formattedDate);\n        if (error) throw error;\n        console.log('Raw times data:', data); // Log raw data\n\n        // Process the fetched times and format them\n        const formattedTimes = data.map(entry => {\n          try {\n            console.log('Formatting time for entry:', entry); // Log entry before formatting\n            const formattedTime = formatTime(entry.time); // Format time\n            return {\n              ...entry,\n              time: formattedTime // Apply the formatted time\n            };\n          } catch (e) {\n            console.error('Error formatting time:', e, entry.time);\n            return null; // Return null if there's an error\n          }\n        }).filter(entry => entry !== null); // Remove entries with errors\n\n        setAvailableTimes(formattedTimes || []);\n      } catch (error) {\n        console.error('Failed to fetch times:', error);\n      }\n    }\n  }, [selectedDate]);\n  useEffect(() => {\n    fetchTimes();\n  }, [fetchTimes]);\n\n  // Fetch bookings from the database\n  const fetchBookings = useCallback(async filterType => {\n    try {\n      let query = supabase.from('bookings').select('*');\n      if (filterType === 'upcoming') {\n        const now = new Date().toISOString(); // Current time\n        query = query.gte('date', now).order('date', {\n          ascending: true\n        }).order('time', {\n          ascending: true\n        });\n      } else if (filterType === 'all') {\n        query = query.order('date', {\n          ascending: true\n        }).order('time', {\n          ascending: true\n        });\n      }\n      const {\n        data,\n        error\n      } = await query;\n      if (error) throw error;\n      setBookings(data || []);\n    } catch (error) {\n      console.error('Error fetching bookings:', error);\n    }\n  }, []);\n  useEffect(() => {\n    fetchBookings(filter);\n\n    // Set up real-time subscription for bookings table\n    const subscription = supabase.from('bookings').on('INSERT', payload => {\n      console.log('New booking:', payload.new);\n      setBookings(prevBookings => [payload.new, ...prevBookings]);\n    }).on('UPDATE', payload => {\n      console.log('Updated booking:', payload.new);\n      setBookings(prevBookings => prevBookings.map(booking => booking.id === payload.new.id ? payload.new : booking));\n    }).on('DELETE', payload => {\n      console.log('Deleted booking:', payload.old);\n      setBookings(prevBookings => prevBookings.filter(booking => booking.id !== payload.old.id));\n    }).subscribe();\n\n    // Clean up subscription on component unmount\n    return () => {\n      supabase.removeSubscription(subscription);\n    };\n  }, [fetchBookings, filter]);\n\n  // Refresh button handler\n  const handleRefresh = () => {\n    fetchBookings(filter);\n  };\n\n  // Filter change handler\n  const handleFilterChange = newFilter => {\n    setFilter(newFilter);\n    fetchBookings(newFilter);\n  };\n\n  // Delete booking handler with confirmation\n  const handleDeleteBooking = async id => {\n    if (window.confirm('Are you sure you want to delete this booking?')) {\n      try {\n        const {\n          error\n        } = await supabase.from('bookings').delete().eq('id', id);\n        if (error) throw error;\n\n        // Remove booking from local state after deletion\n        setBookings(prevBookings => prevBookings.filter(booking => booking.id !== id));\n        console.log('Booking deleted successfully');\n      } catch (error) {\n        console.error('Error deleting booking:', error);\n      }\n    }\n  };\n  const handleSaveTimes = async times => {\n    if (selectedDate) {\n      try {\n        const formattedDate = formatDate(selectedDate);\n        const validTimes = times.filter(time => {\n          try {\n            const formattedTime = formatTime(time.time);\n            return time.date === formattedDate && formattedTime;\n          } catch {\n            return false;\n          }\n        });\n        if (validTimes.length !== times.length) {\n          alert('Some time entries are invalid and will not be saved.');\n        }\n        console.log('Saving times:', validTimes);\n        const {\n          data: savedTimes,\n          error: upsertError\n        } = await supabase.from('available_times').upsert(validTimes.map(time => ({\n          date: formattedDate,\n          time: formatTime(time.time)\n        })), {\n          returning: 'representation'\n        });\n        if (upsertError) throw upsertError;\n        console.log('Times saved successfully:', savedTimes);\n        setAvailableTimes(savedTimes || []);\n      } catch (error) {\n        console.error('Failed to save times:', error);\n      }\n    }\n  };\n  const handleDeleteTime = async id => {\n    console.log(\"Attempting to delete time with ID:\", id); // Debug log\n\n    if (typeof id !== 'number' || isNaN(id)) {\n      console.error(\"Invalid ID:\", id);\n      return;\n    }\n    try {\n      // Call Supabase to delete the time entry with the specific ID\n      const {\n        error\n      } = await supabase.from('available_times').delete().eq('id', id);\n      if (error) throw error;\n\n      // Remove the deleted time from the local state\n      setAvailableTimes(prevTimes => prevTimes.filter(time => time.id !== id));\n    } catch (error) {\n      console.error(\"Error deleting time:\", error);\n    }\n  };\n  const handleDeleteTimes = async timesToDelete => {\n    if (selectedDate) {\n      try {\n        const formattedDate = formatDate(selectedDate);\n        console.log('Deleting times:', timesToDelete);\n        const {\n          error\n        } = await supabase.from('available_times').delete().in('id', timesToDelete.map(time => time.id)).eq('date', formattedDate);\n        if (error) throw error;\n        setAvailableTimes(prevTimes => prevTimes.filter(time => !timesToDelete.some(t => t.id === time.id)));\n      } catch (error) {\n        console.error('Failed to delete times:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-and-times\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-section left-side\",\n        children: /*#__PURE__*/_jsxDEV(CalendarComponent, {\n          setSelectedDate: setSelectedDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-section right-side\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"subHeading\",\n          children: \"Available Times\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"available-times-list\",\n          children: availableTimes.map(timeEntry => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"available-time-item\",\n            children: [timeEntry.time, /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"delete-button\",\n              onClick: () => handleDeleteTime(timeEntry.id),\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 13\n            }, this)]\n          }, timeEntry.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 9\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"times-section\",\n      children: selectedDate && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"subHeading-dropdown-toggle\",\n          onClick: () => setShowTimesForm(!showTimesForm),\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"subHeading\",\n            children: [\"Manage Times for \", selectedDate.toDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 25\n        }, this), showTimesForm && /*#__PURE__*/_jsxDEV(AvailableTimesForm, {\n          onSaveTimes: handleSaveTimes,\n          onDeleteTimes: handleDeleteTimes,\n          availableTimes: availableTimes,\n          selectedDate: selectedDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"refresh-button\",\n      onClick: handleRefresh,\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"subHeading\",\n          children: \"All Bookings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"refresh-button\",\n          onClick: handleRefresh,\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `filter-button ${filter === 'upcoming' ? 'active' : ''}`,\n          onClick: () => handleFilterChange('upcoming'),\n          children: \"Upcoming\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `filter-button ${filter === 'all' ? 'active' : ''}`,\n          onClick: () => handleFilterChange('all'),\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BookingsTable, {\n        bookings: bookings,\n        onDeleteBooking: handleDeleteBooking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 9\n  }, this);\n};\n_s(AdminDashboard, \"D9QL+Tc1AeILKCcADZwhKS+odRM=\");\n_c = AdminDashboard;\nconst BookingsTable = ({\n  bookings,\n  onDeleteBooking\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"table-responsive\",\n  children: /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"table\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Service\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"User Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"User Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"User Phone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Actions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: bookings.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: /*#__PURE__*/_jsxDEV(\"td\", {\n          colSpan: \"7\",\n          children: \"No bookings available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 21\n      }, this) : bookings.map(booking => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: booking.date || 'N/A'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: booking.time || 'N/A'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: booking.service || 'N/A'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: booking.user_name || 'N/A'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: booking.user_email || 'N/A'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: booking.user_phone || 'N/A'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"delete-button\",\n            onClick: () => onDeleteBooking(booking.id),\n            children: \"Cancel Booking\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 29\n        }, this)]\n      }, booking.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 347,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 346,\n  columnNumber: 5\n}, this);\n_c2 = BookingsTable;\nexport default AdminDashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"AdminDashboard\");\n$RefreshReg$(_c2, \"BookingsTable\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","CalendarComponent","supabase","AvailableTimesForm","jsxDEV","_jsxDEV","formatDate","date","Date","Error","toISOString","split","formatTime","time","console","log","error","trim","match","exec","AdminDashboard","_s","selectedDate","setSelectedDate","availableTimes","setAvailableTimes","bookings","setBookings","filter","setFilter","showTimesForm","setShowTimesForm","fetchTimes","formattedDate","data","from","select","eq","formattedTimes","map","entry","formattedTime","e","fetchBookings","filterType","query","now","gte","order","ascending","subscription","on","payload","new","prevBookings","booking","id","old","subscribe","removeSubscription","handleRefresh","handleFilterChange","newFilter","handleDeleteBooking","window","confirm","delete","handleSaveTimes","times","validTimes","length","alert","savedTimes","upsertError","upsert","returning","handleDeleteTime","isNaN","prevTimes","handleDeleteTimes","timesToDelete","in","some","t","className","children","fileName","_jsxFileName","lineNumber","columnNumber","timeEntry","onClick","toDateString","onSaveTimes","onDeleteTimes","BookingsTable","onDeleteBooking","_c","colSpan","service","user_name","user_email","user_phone","_c2","$RefreshReg$"],"sources":["C:/Users/jarno/Desktop/Spa-Website/babyspa/src/pages/AdminDashboard.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport CalendarComponent from '../components/CalendarComponent';\r\nimport supabase from '../supabaseClient'; // Import Supabase client\r\nimport './Styling/adminDashboard.css';\r\nimport AvailableTimesForm from '../components/AvailableTimesForm';\r\n\r\n// Utility functions\r\nconst formatDate = (date) => {\r\n    if (!(date instanceof Date)) throw new Error('Invalid date');\r\n    return date.toISOString().split('T')[0]; // Format as YYYY-MM-DD\r\n};\r\n\r\n// Utility function to format time only within this component\r\nconst formatTime = (time) => {\r\n    console.log(\"Received time for formatting:\", time); // Log the input\r\n\r\n    if (typeof time !== 'string') {\r\n        console.error(`Expected a string but received: ${typeof time}`, time);\r\n        throw new Error('Time must be a string');\r\n    }\r\n\r\n    // Trim any extra spaces or hidden characters\r\n    time = time.trim();\r\n    \r\n    // Regex to match HH:MM:SS or HH:MM format\r\n    const match = /^([01]\\d|2[0-3]):([0-5]\\d)(:[0-5]\\d)?$/.exec(time);\r\n\r\n    if (!match) {\r\n        console.error(`Invalid time format encountered: ${time}`);\r\n        throw new Error(`Invalid time format: ${time}`);\r\n    }\r\n\r\n    // Returning HH:MM format only (ignoring seconds if present)\r\n    return `${match[1]}:${match[2]}`;\r\n};\r\n\r\nconst AdminDashboard = () => {\r\n    const [selectedDate, setSelectedDate] = useState(null);\r\n    const [availableTimes, setAvailableTimes] = useState([]);\r\n    const [bookings, setBookings] = useState([]);\r\n    const [filter, setFilter] = useState('upcoming'); // Default filter is 'upcoming'\r\n    const [showTimesForm, setShowTimesForm] = useState(false);\r\n\r\n    const fetchTimes = useCallback(async () => {\r\n        if (selectedDate) {\r\n            try {\r\n                const formattedDate = formatDate(selectedDate);\r\n                console.log('Fetching times for date:', formattedDate);\r\n                \r\n                // Fetch both id and time\r\n                const { data, error } = await supabase\r\n                    .from('available_times')\r\n                    .select('id, time') // Include id in the selection\r\n                    .eq('date', formattedDate);\r\n    \r\n                if (error) throw error;\r\n    \r\n                console.log('Raw times data:', data); // Log raw data\r\n    \r\n                // Process the fetched times and format them\r\n                const formattedTimes = data.map(entry => {\r\n                    try {\r\n                        console.log('Formatting time for entry:', entry); // Log entry before formatting\r\n                        const formattedTime = formatTime(entry.time); // Format time\r\n                        return {\r\n                            ...entry,\r\n                            time: formattedTime, // Apply the formatted time\r\n                        };\r\n                    } catch (e) {\r\n                        console.error('Error formatting time:', e, entry.time);\r\n                        return null; // Return null if there's an error\r\n                    }\r\n                }).filter(entry => entry !== null); // Remove entries with errors\r\n    \r\n                setAvailableTimes(formattedTimes || []);\r\n            } catch (error) {\r\n                console.error('Failed to fetch times:', error);\r\n            }\r\n        }\r\n    }, [selectedDate]);\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\r\n    useEffect(() => {\r\n        fetchTimes();\r\n    }, [fetchTimes]);\r\n\r\n    \r\n\r\n    // Fetch bookings from the database\r\n    const fetchBookings = useCallback(async (filterType) => {\r\n        try {\r\n            let query = supabase.from('bookings').select('*');\r\n            \r\n            if (filterType === 'upcoming') {\r\n                const now = new Date().toISOString(); // Current time\r\n                query = query\r\n                    .gte('date', now)\r\n                    .order('date', { ascending: true })\r\n                    .order('time', { ascending: true });\r\n            } else if (filterType === 'all') {\r\n                query = query\r\n                    .order('date', { ascending: true })\r\n                    .order('time', { ascending: true });\r\n            }\r\n\r\n            const { data, error } = await query;\r\n\r\n            if (error) throw error;\r\n\r\n            setBookings(data || []);\r\n        } catch (error) {\r\n            console.error('Error fetching bookings:', error);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchBookings(filter);\r\n        \r\n        // Set up real-time subscription for bookings table\r\n        const subscription = supabase\r\n            .from('bookings')\r\n            .on('INSERT', payload => {\r\n                console.log('New booking:', payload.new);\r\n                setBookings(prevBookings => [payload.new, ...prevBookings]);\r\n            })\r\n            .on('UPDATE', payload => {\r\n                console.log('Updated booking:', payload.new);\r\n                setBookings(prevBookings => \r\n                    prevBookings.map(booking =>\r\n                        booking.id === payload.new.id ? payload.new : booking\r\n                    )\r\n                );\r\n            })\r\n            .on('DELETE', payload => {\r\n                console.log('Deleted booking:', payload.old);\r\n                setBookings(prevBookings => \r\n                    prevBookings.filter(booking => booking.id !== payload.old.id)\r\n                );\r\n            })\r\n            .subscribe();\r\n\r\n        // Clean up subscription on component unmount\r\n        return () => {\r\n            supabase.removeSubscription(subscription);\r\n        };\r\n    }, [fetchBookings, filter]);\r\n\r\n    // Refresh button handler\r\n    const handleRefresh = () => {\r\n        fetchBookings(filter);\r\n    };\r\n\r\n    // Filter change handler\r\n    const handleFilterChange = (newFilter) => {\r\n        setFilter(newFilter);\r\n        fetchBookings(newFilter);\r\n    };\r\n\r\n    // Delete booking handler with confirmation\r\n    const handleDeleteBooking = async (id) => {\r\n        if (window.confirm('Are you sure you want to delete this booking?')) {\r\n            try {\r\n                const { error } = await supabase\r\n                    .from('bookings')\r\n                    .delete()\r\n                    .eq('id', id);\r\n\r\n                if (error) throw error;\r\n\r\n                // Remove booking from local state after deletion\r\n                setBookings(prevBookings => \r\n                    prevBookings.filter(booking => booking.id !== id)\r\n                );\r\n\r\n                console.log('Booking deleted successfully');\r\n            } catch (error) {\r\n                console.error('Error deleting booking:', error);\r\n            }\r\n        }\r\n    };\r\n    const handleSaveTimes = async (times) => {\r\n        if (selectedDate) {\r\n            try {\r\n                const formattedDate = formatDate(selectedDate);\r\n\r\n                const validTimes = times.filter(time => {\r\n                    try {\r\n                        const formattedTime = formatTime(time.time);\r\n                        return time.date === formattedDate && formattedTime;\r\n                    } catch {\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                if (validTimes.length !== times.length) {\r\n                    alert('Some time entries are invalid and will not be saved.');\r\n                }\r\n\r\n                console.log('Saving times:', validTimes);\r\n                const { data: savedTimes, error: upsertError } = await supabase\r\n                    .from('available_times')\r\n                    .upsert(validTimes.map(time => ({ date: formattedDate, time: formatTime(time.time) })), { returning: 'representation' });\r\n\r\n                if (upsertError) throw upsertError;\r\n\r\n                console.log('Times saved successfully:', savedTimes);\r\n                setAvailableTimes(savedTimes || []);\r\n            } catch (error) {\r\n                console.error('Failed to save times:', error);\r\n            }\r\n        }\r\n    };\r\n    const handleDeleteTime = async (id) => {\r\n        console.log(\"Attempting to delete time with ID:\", id); // Debug log\r\n    \r\n        if (typeof id !== 'number' || isNaN(id)) {\r\n            console.error(\"Invalid ID:\", id);\r\n            return;\r\n        }\r\n    \r\n        try {\r\n            // Call Supabase to delete the time entry with the specific ID\r\n            const { error } = await supabase\r\n                .from('available_times')\r\n                .delete()\r\n                .eq('id', id);\r\n    \r\n            if (error) throw error;\r\n    \r\n            // Remove the deleted time from the local state\r\n            setAvailableTimes((prevTimes) => prevTimes.filter(time => time.id !== id));\r\n        } catch (error) {\r\n            console.error(\"Error deleting time:\", error);\r\n        }\r\n    };\r\n    \r\n    \r\n    \r\n\r\n    const handleDeleteTimes = async (timesToDelete) => {\r\n        if (selectedDate) {\r\n            try {\r\n                const formattedDate = formatDate(selectedDate);\r\n                console.log('Deleting times:', timesToDelete);\r\n                const { error } = await supabase\r\n                    .from('available_times')\r\n                    .delete()\r\n                    .in('id', timesToDelete.map(time => time.id))\r\n                    .eq('date', formattedDate);\r\n\r\n                if (error) throw error;\r\n\r\n                setAvailableTimes((prevTimes) => prevTimes.filter(time => !timesToDelete.some(t => t.id === time.id)));\r\n            } catch (error) {\r\n                console.error('Failed to delete times:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"admin-container\">\r\n            <div className=\"calendar-and-times\">\r\n                <div className=\"calendar-section left-side\">\r\n                    <CalendarComponent setSelectedDate={setSelectedDate} />\r\n                </div>\r\n                <div className=\"calendar-section right-side\">\r\n                    <h2 className=\"subHeading\">Available Times</h2>\r\n\r\n                    <ul className=\"available-times-list\">\r\n    {availableTimes.map((timeEntry) => (\r\n        <li key={timeEntry.id} className=\"available-time-item\">\r\n            {timeEntry.time}\r\n            <button\r\n                className=\"delete-button\"\r\n                onClick={() => handleDeleteTime(timeEntry.id)}\r\n            >\r\n                &times;\r\n            </button>\r\n        </li>\r\n    ))}\r\n</ul>\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"times-section\">\r\n                {selectedDate && (\r\n                    <div>\r\n                        <button\r\n                            className=\"subHeading-dropdown-toggle\"\r\n                            onClick={() => setShowTimesForm(!showTimesForm)}\r\n                        >\r\n                            <h2 className=\"subHeading\">Manage Times for {selectedDate.toDateString()}</h2>\r\n                        </button>\r\n\r\n                        {showTimesForm && (\r\n                            <AvailableTimesForm\r\n                                onSaveTimes={handleSaveTimes}\r\n                                onDeleteTimes={handleDeleteTimes}\r\n                                availableTimes={availableTimes}\r\n                                selectedDate={selectedDate}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <button className=\"refresh-button\" onClick={handleRefresh}>\r\n                        Refresh\r\n                    </button>\r\n                    <div className=\"section\">\r\n                <div className=\"header\">\r\n                    <h2 className=\"subHeading\">All Bookings</h2>\r\n                    <button className=\"refresh-button\" onClick={handleRefresh}>\r\n                        Refresh\r\n                    </button>\r\n                </div>\r\n                <div className=\"filter-buttons\">\r\n                    <button\r\n                        className={`filter-button ${filter === 'upcoming' ? 'active' : ''}`}\r\n                        onClick={() => handleFilterChange('upcoming')}\r\n                    >\r\n                        Upcoming\r\n                    </button>\r\n                    <button\r\n                        className={`filter-button ${filter === 'all' ? 'active' : ''}`}\r\n                        onClick={() => handleFilterChange('all')}\r\n                    >\r\n                        All\r\n                    </button>\r\n                </div>\r\n                <BookingsTable bookings={bookings} onDeleteBooking={handleDeleteBooking} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst BookingsTable = ({ bookings, onDeleteBooking }) => (\r\n    <div className=\"table-responsive\">\r\n        <table className=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Date</th>\r\n                    <th>Time</th>\r\n                    <th>Service</th>\r\n                    <th>User Name</th>\r\n                    <th>User Email</th>\r\n                    <th>User Phone</th>\r\n                    <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {bookings.length === 0 ? (\r\n                    <tr>\r\n                        <td colSpan=\"7\">No bookings available</td>\r\n                    </tr>\r\n                ) : (\r\n                    bookings.map((booking) => (\r\n                        <tr key={booking.id}>\r\n                            <td>{booking.date || 'N/A'}</td>\r\n                            <td>{booking.time || 'N/A'}</td>\r\n                            <td>{booking.service || 'N/A'}</td>\r\n                            <td>{booking.user_name || 'N/A'}</td>\r\n                            <td>{booking.user_email || 'N/A'}</td>\r\n                            <td>{booking.user_phone || 'N/A'}</td>\r\n                            <td>\r\n                                <button\r\n                                    className=\"delete-button\"\r\n                                    onClick={() => onDeleteBooking(booking.id)}\r\n                                >\r\n                                    Cancel Booking\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    ))\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n);\r\n\r\nexport default AdminDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}