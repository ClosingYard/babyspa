{"ast":null,"code":"const handleBooking = async () => {\n  console.log('handleBooking function called'); // Debug statement\n\n  if (!selectedTime || !service || !userName || !userEmail || !userPhone) {\n    alert('Please fill in all fields before booking.');\n    return;\n  }\n  try {\n    // Insert booking into 'bookings' table\n    const {\n      data: bookingData,\n      error: bookingError\n    } = await supabase.from('bookings').insert([{\n      date: date.toDateString(),\n      time: selectedTime,\n      service,\n      'user_name': userName,\n      'user_email': userEmail,\n      'user_phone': userPhone\n    }]);\n    if (bookingError) {\n      console.error('Error during booking:', bookingError.message);\n      alert('Booking failed. Please try again.');\n      return;\n    }\n    if (bookingData) {\n      var _bookingData$;\n      console.log('Booking successful, data:', bookingData);\n\n      // Notify user of successful booking\n      alert('Booking successful!');\n\n      // Clear form fields and state\n      setSelectedTime('');\n      setService('');\n      setUserName('');\n      setUserEmail('');\n      setUserPhone('');\n      setBookingId((_bookingData$ = bookingData[0]) === null || _bookingData$ === void 0 ? void 0 : _bookingData$.id); // Assuming Supabase returns the booking ID\n\n      // Optionally, remove the booked time from available times\n      // Fetch the list of available times to ensure accurate deletion\n      const {\n        data: availableTimesData,\n        error: availableTimesError\n      } = await supabase.from('available_times').select('id, time').eq('date', date.toDateString());\n      if (availableTimesError) {\n        console.error('Error fetching available times:', availableTimesError.message);\n        return;\n      }\n      const bookedTime = availableTimesData.find(time => time.time === selectedTime);\n      if (bookedTime) {\n        const {\n          error: deleteError\n        } = await supabase.from('available_times').delete().eq('id', bookedTime.id);\n        if (deleteError) {\n          console.error('Error removing available time:', deleteError.message);\n        } else {\n          console.log('Available time removed successfully');\n          setAvailableTimes(prevTimes => prevTimes.filter(time => time !== selectedTime));\n        }\n      }\n    }\n  } catch (err) {\n    console.error('Error making booking:', err.message);\n    alert('An error occurred while making the booking.');\n  }\n};","map":{"version":3,"names":["handleBooking","console","log","selectedTime","service","userName","userEmail","userPhone","alert","data","bookingData","error","bookingError","supabase","from","insert","date","toDateString","time","message","_bookingData$","setSelectedTime","setService","setUserName","setUserEmail","setUserPhone","setBookingId","id","availableTimesData","availableTimesError","select","eq","bookedTime","find","deleteError","delete","setAvailableTimes","prevTimes","filter","err"],"sources":["C:/Users/jarno/Desktop/Spa-Website/babyspa/src/pages/Dashboard.js"],"sourcesContent":["const handleBooking = async () => {\r\n    console.log('handleBooking function called'); // Debug statement\r\n\r\n    if (!selectedTime || !service || !userName || !userEmail || !userPhone) {\r\n        alert('Please fill in all fields before booking.');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // Insert booking into 'bookings' table\r\n        const { data: bookingData, error: bookingError } = await supabase\r\n            .from('bookings')\r\n            .insert([\r\n                {\r\n                    date: date.toDateString(),\r\n                    time: selectedTime,\r\n                    service,\r\n                    'user_name': userName,\r\n                    'user_email': userEmail,\r\n                    'user_phone': userPhone,\r\n                },\r\n            ]);\r\n\r\n        if (bookingError) {\r\n            console.error('Error during booking:', bookingError.message);\r\n            alert('Booking failed. Please try again.');\r\n            return;\r\n        }\r\n\r\n        if (bookingData) {\r\n            console.log('Booking successful, data:', bookingData);\r\n\r\n            // Notify user of successful booking\r\n            alert('Booking successful!');\r\n\r\n            // Clear form fields and state\r\n            setSelectedTime('');\r\n            setService('');\r\n            setUserName('');\r\n            setUserEmail('');\r\n            setUserPhone('');\r\n            setBookingId(bookingData[0]?.id); // Assuming Supabase returns the booking ID\r\n\r\n            // Optionally, remove the booked time from available times\r\n            // Fetch the list of available times to ensure accurate deletion\r\n            const { data: availableTimesData, error: availableTimesError } = await supabase\r\n                .from('available_times')\r\n                .select('id, time')\r\n                .eq('date', date.toDateString());\r\n\r\n            if (availableTimesError) {\r\n                console.error('Error fetching available times:', availableTimesError.message);\r\n                return;\r\n            }\r\n\r\n            const bookedTime = availableTimesData.find(time => time.time === selectedTime);\r\n\r\n            if (bookedTime) {\r\n                const { error: deleteError } = await supabase\r\n                    .from('available_times')\r\n                    .delete()\r\n                    .eq('id', bookedTime.id);\r\n\r\n                if (deleteError) {\r\n                    console.error('Error removing available time:', deleteError.message);\r\n                } else {\r\n                    console.log('Available time removed successfully');\r\n                    setAvailableTimes(prevTimes => prevTimes.filter(time => time !== selectedTime));\r\n                }\r\n            }\r\n        }\r\n    } catch (err) {\r\n        console.error('Error making booking:', err.message);\r\n        alert('An error occurred while making the booking.');\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAMA,aAAa,GAAG,MAAAA,CAAA,KAAY;EAC9BC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAAC,CAAC;;EAE9C,IAAI,CAACC,YAAY,IAAI,CAACC,OAAO,IAAI,CAACC,QAAQ,IAAI,CAACC,SAAS,IAAI,CAACC,SAAS,EAAE;IACpEC,KAAK,CAAC,2CAA2C,CAAC;IAClD;EACJ;EAEA,IAAI;IACA;IACA,MAAM;MAAEC,IAAI,EAAEC,WAAW;MAAEC,KAAK,EAAEC;IAAa,CAAC,GAAG,MAAMC,QAAQ,CAC5DC,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,CACJ;MACIC,IAAI,EAAEA,IAAI,CAACC,YAAY,CAAC,CAAC;MACzBC,IAAI,EAAEf,YAAY;MAClBC,OAAO;MACP,WAAW,EAAEC,QAAQ;MACrB,YAAY,EAAEC,SAAS;MACvB,YAAY,EAAEC;IAClB,CAAC,CACJ,CAAC;IAEN,IAAIK,YAAY,EAAE;MACdX,OAAO,CAACU,KAAK,CAAC,uBAAuB,EAAEC,YAAY,CAACO,OAAO,CAAC;MAC5DX,KAAK,CAAC,mCAAmC,CAAC;MAC1C;IACJ;IAEA,IAAIE,WAAW,EAAE;MAAA,IAAAU,aAAA;MACbnB,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEQ,WAAW,CAAC;;MAErD;MACAF,KAAK,CAAC,qBAAqB,CAAC;;MAE5B;MACAa,eAAe,CAAC,EAAE,CAAC;MACnBC,UAAU,CAAC,EAAE,CAAC;MACdC,WAAW,CAAC,EAAE,CAAC;MACfC,YAAY,CAAC,EAAE,CAAC;MAChBC,YAAY,CAAC,EAAE,CAAC;MAChBC,YAAY,EAAAN,aAAA,GAACV,WAAW,CAAC,CAAC,CAAC,cAAAU,aAAA,uBAAdA,aAAA,CAAgBO,EAAE,CAAC,CAAC,CAAC;;MAElC;MACA;MACA,MAAM;QAAElB,IAAI,EAAEmB,kBAAkB;QAAEjB,KAAK,EAAEkB;MAAoB,CAAC,GAAG,MAAMhB,QAAQ,CAC1EC,IAAI,CAAC,iBAAiB,CAAC,CACvBgB,MAAM,CAAC,UAAU,CAAC,CAClBC,EAAE,CAAC,MAAM,EAAEf,IAAI,CAACC,YAAY,CAAC,CAAC,CAAC;MAEpC,IAAIY,mBAAmB,EAAE;QACrB5B,OAAO,CAACU,KAAK,CAAC,iCAAiC,EAAEkB,mBAAmB,CAACV,OAAO,CAAC;QAC7E;MACJ;MAEA,MAAMa,UAAU,GAAGJ,kBAAkB,CAACK,IAAI,CAACf,IAAI,IAAIA,IAAI,CAACA,IAAI,KAAKf,YAAY,CAAC;MAE9E,IAAI6B,UAAU,EAAE;QACZ,MAAM;UAAErB,KAAK,EAAEuB;QAAY,CAAC,GAAG,MAAMrB,QAAQ,CACxCC,IAAI,CAAC,iBAAiB,CAAC,CACvBqB,MAAM,CAAC,CAAC,CACRJ,EAAE,CAAC,IAAI,EAAEC,UAAU,CAACL,EAAE,CAAC;QAE5B,IAAIO,WAAW,EAAE;UACbjC,OAAO,CAACU,KAAK,CAAC,gCAAgC,EAAEuB,WAAW,CAACf,OAAO,CAAC;QACxE,CAAC,MAAM;UACHlB,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;UAClDkC,iBAAiB,CAACC,SAAS,IAAIA,SAAS,CAACC,MAAM,CAACpB,IAAI,IAAIA,IAAI,KAAKf,YAAY,CAAC,CAAC;QACnF;MACJ;IACJ;EACJ,CAAC,CAAC,OAAOoC,GAAG,EAAE;IACVtC,OAAO,CAACU,KAAK,CAAC,uBAAuB,EAAE4B,GAAG,CAACpB,OAAO,CAAC;IACnDX,KAAK,CAAC,6CAA6C,CAAC;EACxD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}