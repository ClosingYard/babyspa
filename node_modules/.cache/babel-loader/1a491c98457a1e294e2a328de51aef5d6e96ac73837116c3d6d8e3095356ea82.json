{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jarno\\\\Desktop\\\\Spa-Website\\\\babyspa\\\\src\\\\pages\\\\AdminDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport CalendarComponent from '../components/CalendarComponent';\nimport supabase from '../supabaseClient';\nimport './Styling/adminDashboard.css';\nimport AvailableTimesForm from '../components/AvailableTimesForm';\nimport AdminBookingsComponent from '../components/AdminBookingsComponent';\n\n// Utility functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatDate = date => {\n  if (!(date instanceof Date)) throw new Error('Invalid date');\n  return date.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n};\n\n// Utility function to format time only within this component\nconst formatTime = time => {\n  console.log(\"Received time for formatting:\", time); // Log the input\n\n  if (typeof time !== 'string') {\n    console.error(`Expected a string but received: ${typeof time}`, time);\n    throw new Error('Time must be a string');\n  }\n\n  // Trim any extra spaces or hidden characters\n  time = time.trim();\n\n  // Regex to match HH:MM:SS format\n  const timeRegex = /^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/;\n  if (timeRegex.test(time)) {\n    const date = new Date(`1970-01-01T${time}Z`);\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n\n  // If not valid time, return an empty string or handle accordingly\n  console.warn(`Invalid time format: ${time}`);\n  return '';\n};\nconst AdminDashboard = () => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [availableTimes, setAvailableTimes] = useState([]);\n  const fetchAvailableTimes = useCallback(async () => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('available_times').select('*').eq('date', formatDate(selectedDate));\n      if (error) throw error;\n      setAvailableTimes(data || []);\n    } catch (error) {\n      console.error('Error fetching available times:', error);\n    }\n  }, [selectedDate]);\n  useEffect(() => {\n    fetchAvailableTimes();\n  }, [fetchAvailableTimes]);\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-section\",\n      children: /*#__PURE__*/_jsxDEV(CalendarComponent, {\n        onDateChange: handleDateChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"available-times-section\",\n      children: /*#__PURE__*/_jsxDEV(AvailableTimesForm, {\n        onSaveTimes: fetchAvailableTimes,\n        availableTimes: availableTimes,\n        selectedDate: selectedDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bookings-section\",\n      children: /*#__PURE__*/_jsxDEV(AdminBookingsComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(AdminDashboard, \"dl9y1E5JBHtvAx1lv3TFja4QADo=\");\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","CalendarComponent","supabase","AvailableTimesForm","AdminBookingsComponent","jsxDEV","_jsxDEV","formatDate","date","Date","Error","toISOString","split","formatTime","time","console","log","error","trim","timeRegex","test","toLocaleTimeString","hour","minute","warn","AdminDashboard","_s","selectedDate","setSelectedDate","availableTimes","setAvailableTimes","fetchAvailableTimes","data","from","select","eq","handleDateChange","className","children","onDateChange","fileName","_jsxFileName","lineNumber","columnNumber","onSaveTimes","_c","$RefreshReg$"],"sources":["C:/Users/jarno/Desktop/Spa-Website/babyspa/src/pages/AdminDashboard.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport CalendarComponent from '../components/CalendarComponent';\r\nimport supabase from '../supabaseClient';\r\nimport './Styling/adminDashboard.css';\r\nimport AvailableTimesForm from '../components/AvailableTimesForm';\r\nimport AdminBookingsComponent from '../components/AdminBookingsComponent';\r\n\r\n// Utility functions\r\nconst formatDate = (date) => {\r\n    if (!(date instanceof Date)) throw new Error('Invalid date');\r\n    return date.toISOString().split('T')[0]; // Format as YYYY-MM-DD\r\n};\r\n\r\n// Utility function to format time only within this component\r\nconst formatTime = (time) => {\r\n    console.log(\"Received time for formatting:\", time); // Log the input\r\n\r\n    if (typeof time !== 'string') {\r\n        console.error(`Expected a string but received: ${typeof time}`, time);\r\n        throw new Error('Time must be a string');\r\n    }\r\n\r\n    // Trim any extra spaces or hidden characters\r\n    time = time.trim();\r\n    \r\n    // Regex to match HH:MM:SS format\r\n    const timeRegex = /^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/;\r\n\r\n    if (timeRegex.test(time)) {\r\n        const date = new Date(`1970-01-01T${time}Z`);\r\n        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n    }\r\n\r\n    // If not valid time, return an empty string or handle accordingly\r\n    console.warn(`Invalid time format: ${time}`);\r\n    return '';\r\n};\r\n\r\nconst AdminDashboard = () => {\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [availableTimes, setAvailableTimes] = useState([]);\r\n\r\n    const fetchAvailableTimes = useCallback(async () => {\r\n        try {\r\n            const { data, error } = await supabase\r\n                .from('available_times')\r\n                .select('*')\r\n                .eq('date', formatDate(selectedDate));\r\n\r\n            if (error) throw error;\r\n\r\n            setAvailableTimes(data || []);\r\n        } catch (error) {\r\n            console.error('Error fetching available times:', error);\r\n        }\r\n    }, [selectedDate]);\r\n\r\n    useEffect(() => {\r\n        fetchAvailableTimes();\r\n    }, [fetchAvailableTimes]);\r\n\r\n    const handleDateChange = (date) => {\r\n        setSelectedDate(date);\r\n    };\r\n\r\n    return (\r\n        <div className=\"admin-dashboard\">\r\n            <div className=\"calendar-section\">\r\n                <CalendarComponent onDateChange={handleDateChange} />\r\n            </div>\r\n            <div className=\"available-times-section\">\r\n                <AvailableTimesForm\r\n                    onSaveTimes={fetchAvailableTimes}\r\n                    availableTimes={availableTimes}\r\n                    selectedDate={selectedDate}\r\n                />\r\n            </div>\r\n            <div className=\"bookings-section\">\r\n                <AdminBookingsComponent />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}