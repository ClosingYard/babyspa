{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jarno\\\\Desktop\\\\Spa-Website\\\\babyspa\\\\src\\\\components\\\\AdminRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport supabase from '../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminRoute = ({\n  children\n}) => {\n  _s();\n  const [isAdmin, setIsAdmin] = useState(null);\n  useEffect(() => {\n    const checkAdmin = async () => {\n      try {\n        // Get the current user\n        const {\n          data: {\n            user\n          },\n          error: userError\n        } = await supabase.auth.getUser();\n        if (userError) throw userError;\n        if (user) {\n          // Query to check if user is an admin\n          const {\n            data,\n            error\n          } = await supabase.from('roles').select('role').eq('user_id', user.id).single();\n          if (error) {\n            console.error('Error checking role:', error);\n            setIsAdmin(false);\n          } else {\n            setIsAdmin(data.role === 'admin');\n          }\n        } else {\n          setIsAdmin(false);\n        }\n      } catch (error) {\n        console.error('Error in checkAdmin:', error);\n        setIsAdmin(false);\n      }\n    };\n    checkAdmin();\n  }, []);\n  if (isAdmin === null) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 34\n  }, this); // or a spinner\n\n  return isAdmin ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/dashboard\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 33\n  }, this);\n};\n_s(AdminRoute, \"3/HhAYKVYmHOMfn/8alF9nuU6zI=\");\n_c = AdminRoute;\nexport default AdminRoute;\nvar _c;\n$RefreshReg$(_c, \"AdminRoute\");","map":{"version":3,"names":["React","useState","useEffect","Navigate","supabase","jsxDEV","_jsxDEV","AdminRoute","children","_s","isAdmin","setIsAdmin","checkAdmin","data","user","error","userError","auth","getUser","from","select","eq","id","single","console","role","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Users/jarno/Desktop/Spa-Website/babyspa/src/components/AdminRoute.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport supabase from '../supabaseClient';\r\n\r\nconst AdminRoute = ({ children }) => {\r\n    const [isAdmin, setIsAdmin] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const checkAdmin = async () => {\r\n            try {\r\n                // Get the current user\r\n                const { data: { user }, error: userError } = await supabase.auth.getUser();\r\n                if (userError) throw userError;\r\n\r\n                if (user) {\r\n                    // Query to check if user is an admin\r\n                    const { data, error } = await supabase\r\n                        .from('roles')\r\n                        .select('role')\r\n                        .eq('user_id', user.id)\r\n                        .single();\r\n\r\n                    if (error) {\r\n                        console.error('Error checking role:', error);\r\n                        setIsAdmin(false);\r\n                    } else {\r\n                        setIsAdmin(data.role === 'admin');\r\n                    }\r\n                } else {\r\n                    setIsAdmin(false);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error in checkAdmin:', error);\r\n                setIsAdmin(false);\r\n            }\r\n        };\r\n\r\n        checkAdmin();\r\n    }, []);\r\n\r\n    if (isAdmin === null) return <div>Loading...</div>; // or a spinner\r\n\r\n    return isAdmin ? children : <Navigate to=\"/dashboard\" />;\r\n};\r\n\r\nexport default AdminRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,QAAQ,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACZ,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA;QACA,MAAM;UAAEC,IAAI,EAAE;YAAEC;UAAK,CAAC;UAAEC,KAAK,EAAEC;QAAU,CAAC,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAACC,OAAO,CAAC,CAAC;QAC1E,IAAIF,SAAS,EAAE,MAAMA,SAAS;QAE9B,IAAIF,IAAI,EAAE;UACN;UACA,MAAM;YAAED,IAAI;YAAEE;UAAM,CAAC,GAAG,MAAMX,QAAQ,CACjCe,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,MAAM,CAAC,CACdC,EAAE,CAAC,SAAS,EAAEP,IAAI,CAACQ,EAAE,CAAC,CACtBC,MAAM,CAAC,CAAC;UAEb,IAAIR,KAAK,EAAE;YACPS,OAAO,CAACT,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;YAC5CJ,UAAU,CAAC,KAAK,CAAC;UACrB,CAAC,MAAM;YACHA,UAAU,CAACE,IAAI,CAACY,IAAI,KAAK,OAAO,CAAC;UACrC;QACJ,CAAC,MAAM;UACHd,UAAU,CAAC,KAAK,CAAC;QACrB;MACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;QACZS,OAAO,CAACT,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CJ,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDC,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,OAAO,KAAK,IAAI,EAAE,oBAAOJ,OAAA;IAAAE,QAAA,EAAK;EAAU;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC,CAAC,CAAC;;EAEpD,OAAOnB,OAAO,GAAGF,QAAQ,gBAAGF,OAAA,CAACH,QAAQ;IAAC2B,EAAE,EAAC;EAAY;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC5D,CAAC;AAACpB,EAAA,CAvCIF,UAAU;AAAAwB,EAAA,GAAVxB,UAAU;AAyChB,eAAeA,UAAU;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}