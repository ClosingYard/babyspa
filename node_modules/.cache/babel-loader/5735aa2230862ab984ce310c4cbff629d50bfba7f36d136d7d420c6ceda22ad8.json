{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jarno\\\\Desktop\\\\Spa-Website\\\\babyspa\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport CalendarComponent from '../components/CalendarComponent';\nimport supabase from '../supabaseClient'; // Import Supabase client\nimport './Styling/dashboardSty.css';\n\n// Utility function to format date in UTC\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatDate = date => {\n  if (!(date instanceof Date)) throw new Error('Invalid date');\n  const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n  return utcDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD in UTC\n};\n\n// Utility function to format time\nconst formatTime = time => {\n  if (typeof time !== 'string') throw new Error('Time must be a string');\n  time = time.trim();\n  const match = /^([01]\\d|2[0-3]):([0-5]\\d)(:[0-5]\\d)?$/.exec(time);\n  if (!match) throw new Error(`Invalid time format: ${time}`);\n  return `${match[1]}:${match[2]}`; // Return in HH:MM format\n};\nconst Dashboard = () => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [availableTimes, setAvailableTimes] = useState([]);\n  const fetchTimes = useCallback(async () => {\n    if (selectedDate) {\n      try {\n        const formattedDate = formatDate(selectedDate); // Format date in UTC\n        console.log('Fetching times for date (UTC):', formattedDate);\n        const {\n          data,\n          error\n        } = await supabase.from('available_times').select('id, time') // Select id and time\n        .eq('date', formattedDate);\n        if (error) throw error;\n        console.log('Raw times data:', data);\n        const formattedTimes = data.map(entry => ({\n          ...entry,\n          time: formatTime(entry.time) // Format time\n        }));\n        setAvailableTimes(formattedTimes);\n      } catch (error) {\n        console.error('Failed to fetch times:', error);\n      }\n    }\n  }, [selectedDate]);\n  useEffect(() => {\n    fetchTimes();\n  }, [fetchTimes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(CalendarComponent, {\n      setSelectedDate: setSelectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"times-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Available Times for \", selectedDate ? selectedDate.toDateString() : '...']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: availableTimes.map(time => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: time.time\n        }, time.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"3xo5tAUv2siLtz+dbR/rLceGA88=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","CalendarComponent","supabase","jsxDEV","_jsxDEV","formatDate","date","Date","Error","utcDate","UTC","getFullYear","getMonth","getDate","toISOString","split","formatTime","time","trim","match","exec","Dashboard","_s","selectedDate","setSelectedDate","availableTimes","setAvailableTimes","fetchTimes","formattedDate","console","log","data","error","from","select","eq","formattedTimes","map","entry","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toDateString","id","_c","$RefreshReg$"],"sources":["C:/Users/jarno/Desktop/Spa-Website/babyspa/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport CalendarComponent from '../components/CalendarComponent';\r\nimport supabase from '../supabaseClient'; // Import Supabase client\r\nimport './Styling/dashboardSty.css';\r\n\r\n// Utility function to format date in UTC\r\nconst formatDate = (date) => {\r\n    if (!(date instanceof Date)) throw new Error('Invalid date');\r\n    const utcDate = new Date(Date.UTC(\r\n        date.getFullYear(),\r\n        date.getMonth(),\r\n        date.getDate()\r\n    ));\r\n    return utcDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD in UTC\r\n};\r\n\r\n// Utility function to format time\r\nconst formatTime = (time) => {\r\n    if (typeof time !== 'string') throw new Error('Time must be a string');\r\n    \r\n    time = time.trim();\r\n    const match = /^([01]\\d|2[0-3]):([0-5]\\d)(:[0-5]\\d)?$/.exec(time);\r\n    \r\n    if (!match) throw new Error(`Invalid time format: ${time}`);\r\n    \r\n    return `${match[1]}:${match[2]}`; // Return in HH:MM format\r\n};\r\n\r\nconst Dashboard = () => {\r\n    const [selectedDate, setSelectedDate] = useState(null);\r\n    const [availableTimes, setAvailableTimes] = useState([]);\r\n\r\n    const fetchTimes = useCallback(async () => {\r\n        if (selectedDate) {\r\n            try {\r\n                const formattedDate = formatDate(selectedDate); // Format date in UTC\r\n                console.log('Fetching times for date (UTC):', formattedDate);\r\n                \r\n                const { data, error } = await supabase\r\n                    .from('available_times')\r\n                    .select('id, time') // Select id and time\r\n                    .eq('date', formattedDate);\r\n\r\n                if (error) throw error;\r\n\r\n                console.log('Raw times data:', data);\r\n\r\n                const formattedTimes = data.map(entry => ({\r\n                    ...entry,\r\n                    time: formatTime(entry.time) // Format time\r\n                }));\r\n\r\n                setAvailableTimes(formattedTimes);\r\n            } catch (error) {\r\n                console.error('Failed to fetch times:', error);\r\n            }\r\n        }\r\n    }, [selectedDate]);\r\n\r\n    useEffect(() => {\r\n        fetchTimes();\r\n    }, [fetchTimes]);\r\n\r\n    return (\r\n        <div className=\"dashboard-container\">\r\n            <CalendarComponent setSelectedDate={setSelectedDate} />\r\n            <div className=\"times-list\">\r\n                <h2>Available Times for {selectedDate ? selectedDate.toDateString() : '...'}</h2>\r\n                <ul>\r\n                    {availableTimes.map(time => (\r\n                        <li key={time.id}>\r\n                            {time.time}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}